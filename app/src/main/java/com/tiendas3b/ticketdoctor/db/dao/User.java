package com.tiendas3b.ticketdoctor.db.dao;

import com.tiendas3b.ticketdoctor.db.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "USER".
 */
public class User {

    private Long id;
    private String name;
    private String lastName;
    private String login;
    private String password;
    private String email;
    private String phone;
    private String alias;
    private Integer departmentId;
    private Integer branchId;
    private Boolean mailSend;
    private Integer spending;
    private Integer userCreate;
    private java.util.Date dateCreate;
    private Integer userModify;
    private java.util.Date dateModify;
    private Integer userId;
    private Boolean status;
    private Boolean mailEvent;
    private Long profileId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UserDao myDao;

    private Profile profile;
    private Long profile__resolvedKey;


    public User() {
    }

    public User(Long id) {
        this.id = id;
    }

    public User(Long id, String name, String lastName, String login, String password, String email, String phone, String alias, Integer departmentId, Integer branchId, Boolean mailSend, Integer spending, Integer userCreate, java.util.Date dateCreate, Integer userModify, java.util.Date dateModify, Integer userId, Boolean status, Boolean mailEvent, Long profileId) {
        this.id = id;
        this.name = name;
        this.lastName = lastName;
        this.login = login;
        this.password = password;
        this.email = email;
        this.phone = phone;
        this.alias = alias;
        this.departmentId = departmentId;
        this.branchId = branchId;
        this.mailSend = mailSend;
        this.spending = spending;
        this.userCreate = userCreate;
        this.dateCreate = dateCreate;
        this.userModify = userModify;
        this.dateModify = dateModify;
        this.userId = userId;
        this.status = status;
        this.mailEvent = mailEvent;
        this.profileId = profileId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getLogin() {
        return login;
    }

    public void setLogin(String login) {
        this.login = login;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    public String getAlias() {
        return alias;
    }

    public void setAlias(String alias) {
        this.alias = alias;
    }

    public Integer getDepartmentId() {
        return departmentId;
    }

    public void setDepartmentId(Integer departmentId) {
        this.departmentId = departmentId;
    }

    public Integer getBranchId() {
        return branchId;
    }

    public void setBranchId(Integer branchId) {
        this.branchId = branchId;
    }

    public Boolean getMailSend() {
        return mailSend;
    }

    public void setMailSend(Boolean mailSend) {
        this.mailSend = mailSend;
    }

    public Integer getSpending() {
        return spending;
    }

    public void setSpending(Integer spending) {
        this.spending = spending;
    }

    public Integer getUserCreate() {
        return userCreate;
    }

    public void setUserCreate(Integer userCreate) {
        this.userCreate = userCreate;
    }

    public java.util.Date getDateCreate() {
        return dateCreate;
    }

    public void setDateCreate(java.util.Date dateCreate) {
        this.dateCreate = dateCreate;
    }

    public Integer getUserModify() {
        return userModify;
    }

    public void setUserModify(Integer userModify) {
        this.userModify = userModify;
    }

    public java.util.Date getDateModify() {
        return dateModify;
    }

    public void setDateModify(java.util.Date dateModify) {
        this.dateModify = dateModify;
    }

    public Integer getUserId() {
        return userId;
    }

    public void setUserId(Integer userId) {
        this.userId = userId;
    }

    public Boolean getStatus() {
        return status;
    }

    public void setStatus(Boolean status) {
        this.status = status;
    }

    public Boolean getMailEvent() {
        return mailEvent;
    }

    public void setMailEvent(Boolean mailEvent) {
        this.mailEvent = mailEvent;
    }

    public Long getProfileId() {
        return profileId;
    }

    public void setProfileId(Long profileId) {
        this.profileId = profileId;
    }

    /** To-one relationship, resolved on first access. */
    public Profile getProfile() {
        Long __key = this.profileId;
        if (profile__resolvedKey == null || !profile__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ProfileDao targetDao = daoSession.getProfileDao();
            Profile profileNew = targetDao.load(__key);
            synchronized (this) {
                profile = profileNew;
            	profile__resolvedKey = __key;
            }
        }
        return profile;
    }

    public void setProfile(Profile profile) {
        synchronized (this) {
            this.profile = profile;
            profileId = profile == null ? null : profile.getId();
            profile__resolvedKey = profileId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
