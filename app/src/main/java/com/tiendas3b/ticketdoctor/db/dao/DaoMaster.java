package com.tiendas3b.ticketdoctor.db.dao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import com.tiendas3b.ticketdoctor.db.dao.TicketDao;
import com.tiendas3b.ticketdoctor.db.dao.TicketStatusDao;
import com.tiendas3b.ticketdoctor.db.dao.ActionDao;
import com.tiendas3b.ticketdoctor.db.dao.UserDao;
import com.tiendas3b.ticketdoctor.db.dao.CategoryDao;
import com.tiendas3b.ticketdoctor.db.dao.TypeDao;
import com.tiendas3b.ticketdoctor.db.dao.ProjectStatusDao;
import com.tiendas3b.ticketdoctor.db.dao.ProviderDao;
import com.tiendas3b.ticketdoctor.db.dao.SymptomDao;
import com.tiendas3b.ticketdoctor.db.dao.DiagnosticDao;
import com.tiendas3b.ticketdoctor.db.dao.TypeSymptomDao;
import com.tiendas3b.ticketdoctor.db.dao.SymptomDiagnosticDao;
import com.tiendas3b.ticketdoctor.db.dao.ImpCauseDao;
import com.tiendas3b.ticketdoctor.db.dao.BranchTypeDao;
import com.tiendas3b.ticketdoctor.db.dao.BranchDao;
import com.tiendas3b.ticketdoctor.db.dao.StandardSolutionDao;
import com.tiendas3b.ticketdoctor.db.dao.PossibleOriginDao;
import com.tiendas3b.ticketdoctor.db.dao.ProfileDao;
import com.tiendas3b.ticketdoctor.db.dao.AccessDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 1): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 1;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        TicketDao.createTable(db, ifNotExists);
        TicketStatusDao.createTable(db, ifNotExists);
        ActionDao.createTable(db, ifNotExists);
        UserDao.createTable(db, ifNotExists);
        CategoryDao.createTable(db, ifNotExists);
        TypeDao.createTable(db, ifNotExists);
        ProjectStatusDao.createTable(db, ifNotExists);
        ProviderDao.createTable(db, ifNotExists);
        SymptomDao.createTable(db, ifNotExists);
        DiagnosticDao.createTable(db, ifNotExists);
        TypeSymptomDao.createTable(db, ifNotExists);
        SymptomDiagnosticDao.createTable(db, ifNotExists);
        ImpCauseDao.createTable(db, ifNotExists);
        BranchTypeDao.createTable(db, ifNotExists);
        BranchDao.createTable(db, ifNotExists);
        StandardSolutionDao.createTable(db, ifNotExists);
        PossibleOriginDao.createTable(db, ifNotExists);
        ProfileDao.createTable(db, ifNotExists);
        AccessDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        TicketDao.dropTable(db, ifExists);
        TicketStatusDao.dropTable(db, ifExists);
        ActionDao.dropTable(db, ifExists);
        UserDao.dropTable(db, ifExists);
        CategoryDao.dropTable(db, ifExists);
        TypeDao.dropTable(db, ifExists);
        ProjectStatusDao.dropTable(db, ifExists);
        ProviderDao.dropTable(db, ifExists);
        SymptomDao.dropTable(db, ifExists);
        DiagnosticDao.dropTable(db, ifExists);
        TypeSymptomDao.dropTable(db, ifExists);
        SymptomDiagnosticDao.dropTable(db, ifExists);
        ImpCauseDao.dropTable(db, ifExists);
        BranchTypeDao.dropTable(db, ifExists);
        BranchDao.dropTable(db, ifExists);
        StandardSolutionDao.dropTable(db, ifExists);
        PossibleOriginDao.dropTable(db, ifExists);
        ProfileDao.dropTable(db, ifExists);
        AccessDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(TicketDao.class);
        registerDaoClass(TicketStatusDao.class);
        registerDaoClass(ActionDao.class);
        registerDaoClass(UserDao.class);
        registerDaoClass(CategoryDao.class);
        registerDaoClass(TypeDao.class);
        registerDaoClass(ProjectStatusDao.class);
        registerDaoClass(ProviderDao.class);
        registerDaoClass(SymptomDao.class);
        registerDaoClass(DiagnosticDao.class);
        registerDaoClass(TypeSymptomDao.class);
        registerDaoClass(SymptomDiagnosticDao.class);
        registerDaoClass(ImpCauseDao.class);
        registerDaoClass(BranchTypeDao.class);
        registerDaoClass(BranchDao.class);
        registerDaoClass(StandardSolutionDao.class);
        registerDaoClass(PossibleOriginDao.class);
        registerDaoClass(ProfileDao.class);
        registerDaoClass(AccessDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
