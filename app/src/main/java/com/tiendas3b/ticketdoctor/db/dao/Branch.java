package com.tiendas3b.ticketdoctor.db.dao;

import com.tiendas3b.ticketdoctor.db.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "BRANCH".
 */
public class Branch {

    private Long id;
    /** Not-null value. */
    private String number3b;
    /** Not-null value. */
    private String name;
    private String street;
    private String number;
    private String neighborhood;
    private String township;
    /** Not-null value. */
    private String city;
    private String postalCode;
    private String phone;
    private String cellphone;
    private Long storehouseId;
    private Long districtId;
    private long technicianId;
    private Integer status;
    private Long attendantId;
    private Boolean purchaseDelivery;
    private String code;
    private String emails;
    private long branchTypeId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient BranchDao myDao;

    private BranchType branchType;
    private Long branchType__resolvedKey;


    public Branch() {
    }

    public Branch(Long id) {
        this.id = id;
    }

    public Branch(Long id, String number3b, String name, String street, String number, String neighborhood, String township, String city, String postalCode, String phone, String cellphone, Long storehouseId, Long districtId, long technicianId, Integer status, Long attendantId, Boolean purchaseDelivery, String code, String emails, long branchTypeId) {
        this.id = id;
        this.number3b = number3b;
        this.name = name;
        this.street = street;
        this.number = number;
        this.neighborhood = neighborhood;
        this.township = township;
        this.city = city;
        this.postalCode = postalCode;
        this.phone = phone;
        this.cellphone = cellphone;
        this.storehouseId = storehouseId;
        this.districtId = districtId;
        this.technicianId = technicianId;
        this.status = status;
        this.attendantId = attendantId;
        this.purchaseDelivery = purchaseDelivery;
        this.code = code;
        this.emails = emails;
        this.branchTypeId = branchTypeId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getBranchDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getNumber3b() {
        return number3b;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setNumber3b(String number3b) {
        this.number3b = number3b;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    public String getStreet() {
        return street;
    }

    public void setStreet(String street) {
        this.street = street;
    }

    public String getNumber() {
        return number;
    }

    public void setNumber(String number) {
        this.number = number;
    }

    public String getNeighborhood() {
        return neighborhood;
    }

    public void setNeighborhood(String neighborhood) {
        this.neighborhood = neighborhood;
    }

    public String getTownship() {
        return township;
    }

    public void setTownship(String township) {
        this.township = township;
    }

    /** Not-null value. */
    public String getCity() {
        return city;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCity(String city) {
        this.city = city;
    }

    public String getPostalCode() {
        return postalCode;
    }

    public void setPostalCode(String postalCode) {
        this.postalCode = postalCode;
    }

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    public String getCellphone() {
        return cellphone;
    }

    public void setCellphone(String cellphone) {
        this.cellphone = cellphone;
    }

    public Long getStorehouseId() {
        return storehouseId;
    }

    public void setStorehouseId(Long storehouseId) {
        this.storehouseId = storehouseId;
    }

    public Long getDistrictId() {
        return districtId;
    }

    public void setDistrictId(Long districtId) {
        this.districtId = districtId;
    }

    public long getTechnicianId() {
        return technicianId;
    }

    public void setTechnicianId(long technicianId) {
        this.technicianId = technicianId;
    }

    public Integer getStatus() {
        return status;
    }

    public void setStatus(Integer status) {
        this.status = status;
    }

    public Long getAttendantId() {
        return attendantId;
    }

    public void setAttendantId(Long attendantId) {
        this.attendantId = attendantId;
    }

    public Boolean getPurchaseDelivery() {
        return purchaseDelivery;
    }

    public void setPurchaseDelivery(Boolean purchaseDelivery) {
        this.purchaseDelivery = purchaseDelivery;
    }

    public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    public String getEmails() {
        return emails;
    }

    public void setEmails(String emails) {
        this.emails = emails;
    }

    public long getBranchTypeId() {
        return branchTypeId;
    }

    public void setBranchTypeId(long branchTypeId) {
        this.branchTypeId = branchTypeId;
    }

    /** To-one relationship, resolved on first access. */
    public BranchType getBranchType() {
        long __key = this.branchTypeId;
        if (branchType__resolvedKey == null || !branchType__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BranchTypeDao targetDao = daoSession.getBranchTypeDao();
            BranchType branchTypeNew = targetDao.load(__key);
            synchronized (this) {
                branchType = branchTypeNew;
            	branchType__resolvedKey = __key;
            }
        }
        return branchType;
    }

    public void setBranchType(BranchType branchType) {
        if (branchType == null) {
            throw new DaoException("To-one property 'branchTypeId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.branchType = branchType;
            branchTypeId = branchType.getId();
            branchType__resolvedKey = branchTypeId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
