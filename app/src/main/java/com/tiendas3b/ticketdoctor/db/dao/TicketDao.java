package com.tiendas3b.ticketdoctor.db.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.tiendas3b.ticketdoctor.db.dao.Ticket;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TICKET".
*/
public class TicketDao extends AbstractDao<Ticket, Long> {

    public static final String TABLENAME = "TICKET";

    /**
     * Properties of entity Ticket.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Observations = new Property(1, String.class, "observations", false, "OBSERVATIONS");
        public final static Property RemoteSolution = new Property(2, Boolean.class, "remoteSolution", false, "REMOTE_SOLUTION");
        public final static Property OpeningDate = new Property(3, java.util.Date.class, "openingDate", false, "OPENING_DATE");
        public final static Property UpdateDate = new Property(4, java.util.Date.class, "updateDate", false, "UPDATE_DATE");
        public final static Property SolutionDate = new Property(5, java.util.Date.class, "solutionDate", false, "SOLUTION_DATE");
        public final static Property ClosingDate = new Property(6, java.util.Date.class, "closingDate", false, "CLOSING_DATE");
        public final static Property SolutionId = new Property(7, Integer.class, "solutionId", false, "SOLUTION_ID");
        public final static Property File = new Property(8, String.class, "file", false, "FILE");
        public final static Property Caption = new Property(9, String.class, "caption", false, "CAPTION");
        public final static Property OpenDays = new Property(10, Integer.class, "openDays", false, "OPEN_DAYS");
        public final static Property Lapsed = new Property(11, String.class, "lapsed", false, "LAPSED");
        public final static Property ApplicantId = new Property(12, long.class, "applicantId", false, "APPLICANT_ID");
        public final static Property KeyboarderId = new Property(13, long.class, "keyboarderId", false, "KEYBOARDER_ID");
        public final static Property WaitingForUserId = new Property(14, Long.class, "waitingForUserId", false, "WAITING_FOR_USER_ID");
        public final static Property WaitingForProviderId = new Property(15, Long.class, "waitingForProviderId", false, "WAITING_FOR_PROVIDER_ID");
        public final static Property TechnicianId = new Property(16, Long.class, "technicianId", false, "TECHNICIAN_ID");
        public final static Property CategoryId = new Property(17, long.class, "categoryId", false, "CATEGORY_ID");
        public final static Property ProjectStatusId = new Property(18, long.class, "projectStatusId", false, "PROJECT_STATUS_ID");
        public final static Property TypeId = new Property(19, Long.class, "typeId", false, "TYPE_ID");
        public final static Property StatusId = new Property(20, long.class, "statusId", false, "STATUS_ID");
        public final static Property SymptomId = new Property(21, long.class, "symptomId", false, "SYMPTOM_ID");
        public final static Property DiagnosticId = new Property(22, Long.class, "diagnosticId", false, "DIAGNOSTIC_ID");
        public final static Property CauseId = new Property(23, Long.class, "causeId", false, "CAUSE_ID");
        public final static Property BranchId = new Property(24, long.class, "branchId", false, "BRANCH_ID");
        public final static Property StandardSolutionId = new Property(25, Long.class, "standardSolutionId", false, "STANDARD_SOLUTION_ID");
        public final static Property PossibleOriginId = new Property(26, Long.class, "possibleOriginId", false, "POSSIBLE_ORIGIN_ID");
    };

    private DaoSession daoSession;


    public TicketDao(DaoConfig config) {
        super(config);
    }
    
    public TicketDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TICKET\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"OBSERVATIONS\" TEXT NOT NULL ," + // 1: observations
                "\"REMOTE_SOLUTION\" INTEGER," + // 2: remoteSolution
                "\"OPENING_DATE\" INTEGER," + // 3: openingDate
                "\"UPDATE_DATE\" INTEGER," + // 4: updateDate
                "\"SOLUTION_DATE\" INTEGER," + // 5: solutionDate
                "\"CLOSING_DATE\" INTEGER," + // 6: closingDate
                "\"SOLUTION_ID\" INTEGER," + // 7: solutionId
                "\"FILE\" TEXT," + // 8: file
                "\"CAPTION\" TEXT," + // 9: caption
                "\"OPEN_DAYS\" INTEGER," + // 10: openDays
                "\"LAPSED\" TEXT," + // 11: lapsed
                "\"APPLICANT_ID\" INTEGER NOT NULL ," + // 12: applicantId
                "\"KEYBOARDER_ID\" INTEGER NOT NULL ," + // 13: keyboarderId
                "\"WAITING_FOR_USER_ID\" INTEGER," + // 14: waitingForUserId
                "\"WAITING_FOR_PROVIDER_ID\" INTEGER," + // 15: waitingForProviderId
                "\"TECHNICIAN_ID\" INTEGER," + // 16: technicianId
                "\"CATEGORY_ID\" INTEGER NOT NULL ," + // 17: categoryId
                "\"PROJECT_STATUS_ID\" INTEGER NOT NULL ," + // 18: projectStatusId
                "\"TYPE_ID\" INTEGER," + // 19: typeId
                "\"STATUS_ID\" INTEGER NOT NULL ," + // 20: statusId
                "\"SYMPTOM_ID\" INTEGER NOT NULL ," + // 21: symptomId
                "\"DIAGNOSTIC_ID\" INTEGER," + // 22: diagnosticId
                "\"CAUSE_ID\" INTEGER," + // 23: causeId
                "\"BRANCH_ID\" INTEGER NOT NULL ," + // 24: branchId
                "\"STANDARD_SOLUTION_ID\" INTEGER," + // 25: standardSolutionId
                "\"POSSIBLE_ORIGIN_ID\" INTEGER);"); // 26: possibleOriginId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TICKET\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Ticket entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getObservations());
 
        Boolean remoteSolution = entity.getRemoteSolution();
        if (remoteSolution != null) {
            stmt.bindLong(3, remoteSolution ? 1L: 0L);
        }
 
        java.util.Date openingDate = entity.getOpeningDate();
        if (openingDate != null) {
            stmt.bindLong(4, openingDate.getTime());
        }
 
        java.util.Date updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindLong(5, updateDate.getTime());
        }
 
        java.util.Date solutionDate = entity.getSolutionDate();
        if (solutionDate != null) {
            stmt.bindLong(6, solutionDate.getTime());
        }
 
        java.util.Date closingDate = entity.getClosingDate();
        if (closingDate != null) {
            stmt.bindLong(7, closingDate.getTime());
        }
 
        Integer solutionId = entity.getSolutionId();
        if (solutionId != null) {
            stmt.bindLong(8, solutionId);
        }
 
        String file = entity.getFile();
        if (file != null) {
            stmt.bindString(9, file);
        }
 
        String caption = entity.getCaption();
        if (caption != null) {
            stmt.bindString(10, caption);
        }
 
        Integer openDays = entity.getOpenDays();
        if (openDays != null) {
            stmt.bindLong(11, openDays);
        }
 
        String lapsed = entity.getLapsed();
        if (lapsed != null) {
            stmt.bindString(12, lapsed);
        }
        stmt.bindLong(13, entity.getApplicantId());
        stmt.bindLong(14, entity.getKeyboarderId());
 
        Long waitingForUserId = entity.getWaitingForUserId();
        if (waitingForUserId != null) {
            stmt.bindLong(15, waitingForUserId);
        }
 
        Long waitingForProviderId = entity.getWaitingForProviderId();
        if (waitingForProviderId != null) {
            stmt.bindLong(16, waitingForProviderId);
        }
 
        Long technicianId = entity.getTechnicianId();
        if (technicianId != null) {
            stmt.bindLong(17, technicianId);
        }
        stmt.bindLong(18, entity.getCategoryId());
        stmt.bindLong(19, entity.getProjectStatusId());
 
        Long typeId = entity.getTypeId();
        if (typeId != null) {
            stmt.bindLong(20, typeId);
        }
        stmt.bindLong(21, entity.getStatusId());
        stmt.bindLong(22, entity.getSymptomId());
 
        Long diagnosticId = entity.getDiagnosticId();
        if (diagnosticId != null) {
            stmt.bindLong(23, diagnosticId);
        }
 
        Long causeId = entity.getCauseId();
        if (causeId != null) {
            stmt.bindLong(24, causeId);
        }
        stmt.bindLong(25, entity.getBranchId());
 
        Long standardSolutionId = entity.getStandardSolutionId();
        if (standardSolutionId != null) {
            stmt.bindLong(26, standardSolutionId);
        }
 
        Long possibleOriginId = entity.getPossibleOriginId();
        if (possibleOriginId != null) {
            stmt.bindLong(27, possibleOriginId);
        }
    }

    @Override
    protected void attachEntity(Ticket entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Ticket readEntity(Cursor cursor, int offset) {
        Ticket entity = new Ticket( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // observations
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // remoteSolution
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // openingDate
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // updateDate
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // solutionDate
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // closingDate
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // solutionId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // file
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // caption
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // openDays
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // lapsed
            cursor.getLong(offset + 12), // applicantId
            cursor.getLong(offset + 13), // keyboarderId
            cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14), // waitingForUserId
            cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15), // waitingForProviderId
            cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16), // technicianId
            cursor.getLong(offset + 17), // categoryId
            cursor.getLong(offset + 18), // projectStatusId
            cursor.isNull(offset + 19) ? null : cursor.getLong(offset + 19), // typeId
            cursor.getLong(offset + 20), // statusId
            cursor.getLong(offset + 21), // symptomId
            cursor.isNull(offset + 22) ? null : cursor.getLong(offset + 22), // diagnosticId
            cursor.isNull(offset + 23) ? null : cursor.getLong(offset + 23), // causeId
            cursor.getLong(offset + 24), // branchId
            cursor.isNull(offset + 25) ? null : cursor.getLong(offset + 25), // standardSolutionId
            cursor.isNull(offset + 26) ? null : cursor.getLong(offset + 26) // possibleOriginId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Ticket entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setObservations(cursor.getString(offset + 1));
        entity.setRemoteSolution(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setOpeningDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setUpdateDate(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setSolutionDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setClosingDate(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setSolutionId(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setFile(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCaption(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setOpenDays(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setLapsed(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setApplicantId(cursor.getLong(offset + 12));
        entity.setKeyboarderId(cursor.getLong(offset + 13));
        entity.setWaitingForUserId(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
        entity.setWaitingForProviderId(cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15));
        entity.setTechnicianId(cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16));
        entity.setCategoryId(cursor.getLong(offset + 17));
        entity.setProjectStatusId(cursor.getLong(offset + 18));
        entity.setTypeId(cursor.isNull(offset + 19) ? null : cursor.getLong(offset + 19));
        entity.setStatusId(cursor.getLong(offset + 20));
        entity.setSymptomId(cursor.getLong(offset + 21));
        entity.setDiagnosticId(cursor.isNull(offset + 22) ? null : cursor.getLong(offset + 22));
        entity.setCauseId(cursor.isNull(offset + 23) ? null : cursor.getLong(offset + 23));
        entity.setBranchId(cursor.getLong(offset + 24));
        entity.setStandardSolutionId(cursor.isNull(offset + 25) ? null : cursor.getLong(offset + 25));
        entity.setPossibleOriginId(cursor.isNull(offset + 26) ? null : cursor.getLong(offset + 26));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Ticket entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Ticket entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getUserDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getUserDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T3", daoSession.getProviderDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T4", daoSession.getUserDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T5", daoSession.getCategoryDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T6", daoSession.getProjectStatusDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T7", daoSession.getTypeDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T8", daoSession.getTicketStatusDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T9", daoSession.getTypeSymptomDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T10", daoSession.getSymptomDiagnosticDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T11", daoSession.getImpCauseDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T12", daoSession.getBranchDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T13", daoSession.getStandardSolutionDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T14", daoSession.getPossibleOriginDao().getAllColumns());
            builder.append(" FROM TICKET T");
            builder.append(" LEFT JOIN USER T0 ON T.\"APPLICANT_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN USER T1 ON T.\"KEYBOARDER_ID\"=T1.\"_id\"");
            builder.append(" LEFT JOIN USER T2 ON T.\"WAITING_FOR_USER_ID\"=T2.\"_id\"");
            builder.append(" LEFT JOIN PROVIDER T3 ON T.\"WAITING_FOR_PROVIDER_ID\"=T3.\"_id\"");
            builder.append(" LEFT JOIN USER T4 ON T.\"TECHNICIAN_ID\"=T4.\"_id\"");
            builder.append(" LEFT JOIN CATEGORY T5 ON T.\"CATEGORY_ID\"=T5.\"_id\"");
            builder.append(" LEFT JOIN PROJECT_STATUS T6 ON T.\"PROJECT_STATUS_ID\"=T6.\"_id\"");
            builder.append(" LEFT JOIN TYPE T7 ON T.\"TYPE_ID\"=T7.\"_id\"");
            builder.append(" LEFT JOIN TICKET_STATUS T8 ON T.\"STATUS_ID\"=T8.\"_id\"");
            builder.append(" LEFT JOIN TYPE_SYMPTOM T9 ON T.\"SYMPTOM_ID\"=T9.\"_id\"");
            builder.append(" LEFT JOIN SYMPTOM_DIAGNOSTIC T10 ON T.\"DIAGNOSTIC_ID\"=T10.\"_id\"");
            builder.append(" LEFT JOIN IMP_CAUSE T11 ON T.\"CAUSE_ID\"=T11.\"_id\"");
            builder.append(" LEFT JOIN BRANCH T12 ON T.\"BRANCH_ID\"=T12.\"_id\"");
            builder.append(" LEFT JOIN STANDARD_SOLUTION T13 ON T.\"STANDARD_SOLUTION_ID\"=T13.\"_id\"");
            builder.append(" LEFT JOIN POSSIBLE_ORIGIN T14 ON T.\"POSSIBLE_ORIGIN_ID\"=T14.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Ticket loadCurrentDeep(Cursor cursor, boolean lock) {
        Ticket entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        User applicant = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
         if(applicant != null) {
            entity.setApplicant(applicant);
        }
        offset += daoSession.getUserDao().getAllColumns().length;

        User keyboarder = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
         if(keyboarder != null) {
            entity.setKeyboarder(keyboarder);
        }
        offset += daoSession.getUserDao().getAllColumns().length;

        User waitingForUser = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
        entity.setWaitingForUser(waitingForUser);
        offset += daoSession.getUserDao().getAllColumns().length;

        Provider waitingForProvider = loadCurrentOther(daoSession.getProviderDao(), cursor, offset);
        entity.setWaitingForProvider(waitingForProvider);
        offset += daoSession.getProviderDao().getAllColumns().length;

        User technician = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
        entity.setTechnician(technician);
        offset += daoSession.getUserDao().getAllColumns().length;

        Category category = loadCurrentOther(daoSession.getCategoryDao(), cursor, offset);
         if(category != null) {
            entity.setCategory(category);
        }
        offset += daoSession.getCategoryDao().getAllColumns().length;

        ProjectStatus projectStatus = loadCurrentOther(daoSession.getProjectStatusDao(), cursor, offset);
         if(projectStatus != null) {
            entity.setProjectStatus(projectStatus);
        }
        offset += daoSession.getProjectStatusDao().getAllColumns().length;

        Type type = loadCurrentOther(daoSession.getTypeDao(), cursor, offset);
        entity.setType(type);
        offset += daoSession.getTypeDao().getAllColumns().length;

        TicketStatus status = loadCurrentOther(daoSession.getTicketStatusDao(), cursor, offset);
         if(status != null) {
            entity.setStatus(status);
        }
        offset += daoSession.getTicketStatusDao().getAllColumns().length;

        TypeSymptom typeSymptom = loadCurrentOther(daoSession.getTypeSymptomDao(), cursor, offset);
         if(typeSymptom != null) {
            entity.setTypeSymptom(typeSymptom);
        }
        offset += daoSession.getTypeSymptomDao().getAllColumns().length;

        SymptomDiagnostic symptomDiagnostic = loadCurrentOther(daoSession.getSymptomDiagnosticDao(), cursor, offset);
        entity.setSymptomDiagnostic(symptomDiagnostic);
        offset += daoSession.getSymptomDiagnosticDao().getAllColumns().length;

        ImpCause cause = loadCurrentOther(daoSession.getImpCauseDao(), cursor, offset);
        entity.setCause(cause);
        offset += daoSession.getImpCauseDao().getAllColumns().length;

        Branch branch = loadCurrentOther(daoSession.getBranchDao(), cursor, offset);
         if(branch != null) {
            entity.setBranch(branch);
        }
        offset += daoSession.getBranchDao().getAllColumns().length;

        StandardSolution standardSolution = loadCurrentOther(daoSession.getStandardSolutionDao(), cursor, offset);
        entity.setStandardSolution(standardSolution);
        offset += daoSession.getStandardSolutionDao().getAllColumns().length;

        PossibleOrigin possibleOrigin = loadCurrentOther(daoSession.getPossibleOriginDao(), cursor, offset);
        entity.setPossibleOrigin(possibleOrigin);

        return entity;    
    }

    public Ticket loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Ticket> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Ticket> list = new ArrayList<Ticket>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Ticket> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Ticket> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
