package com.tiendas3b.ticketdoctor.db.dao;

import com.tiendas3b.ticketdoctor.db.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "ACTION".
 */
public class Action {

    private Long id;
    /** Not-null value. */
    private java.util.Date date;
    /** Not-null value. */
    private String description;
    private Long providerId;
    private long technicianId;
    private long ticketId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ActionDao myDao;

    private Provider provider;
    private Long provider__resolvedKey;

    private User technician;
    private Long technician__resolvedKey;


    public Action() {
    }

    public Action(Long id) {
        this.id = id;
    }

    public Action(Long id, java.util.Date date, String description, Long providerId, long technicianId, long ticketId) {
        this.id = id;
        this.date = date;
        this.description = description;
        this.providerId = providerId;
        this.technicianId = technicianId;
        this.ticketId = ticketId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getActionDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public java.util.Date getDate() {
        return date;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDate(java.util.Date date) {
        this.date = date;
    }

    /** Not-null value. */
    public String getDescription() {
        return description;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDescription(String description) {
        this.description = description;
    }

    public Long getProviderId() {
        return providerId;
    }

    public void setProviderId(Long providerId) {
        this.providerId = providerId;
    }

    public long getTechnicianId() {
        return technicianId;
    }

    public void setTechnicianId(long technicianId) {
        this.technicianId = technicianId;
    }

    public long getTicketId() {
        return ticketId;
    }

    public void setTicketId(long ticketId) {
        this.ticketId = ticketId;
    }

    /** To-one relationship, resolved on first access. */
    public Provider getProvider() {
        Long __key = this.providerId;
        if (provider__resolvedKey == null || !provider__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ProviderDao targetDao = daoSession.getProviderDao();
            Provider providerNew = targetDao.load(__key);
            synchronized (this) {
                provider = providerNew;
            	provider__resolvedKey = __key;
            }
        }
        return provider;
    }

    public void setProvider(Provider provider) {
        synchronized (this) {
            this.provider = provider;
            providerId = provider == null ? null : provider.getId();
            provider__resolvedKey = providerId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public User getTechnician() {
        long __key = this.technicianId;
        if (technician__resolvedKey == null || !technician__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User technicianNew = targetDao.load(__key);
            synchronized (this) {
                technician = technicianNew;
            	technician__resolvedKey = __key;
            }
        }
        return technician;
    }

    public void setTechnician(User technician) {
        if (technician == null) {
            throw new DaoException("To-one property 'technicianId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.technician = technician;
            technicianId = technician.getId();
            technician__resolvedKey = technicianId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
