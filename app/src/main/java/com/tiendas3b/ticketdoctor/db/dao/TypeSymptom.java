package com.tiendas3b.ticketdoctor.db.dao;

import com.tiendas3b.ticketdoctor.db.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "TYPE_SYMPTOM".
 */
public class TypeSymptom {

    private Long id;
    /** Not-null value. */
    private String renew;
    private boolean status;
    private long typeId;
    private long symptomId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TypeSymptomDao myDao;

    private Type type;
    private Long type__resolvedKey;

    private Symptom symptom;
    private Long symptom__resolvedKey;


    public TypeSymptom() {
    }

    public TypeSymptom(Long id) {
        this.id = id;
    }

    public TypeSymptom(Long id, String renew, boolean status, long typeId, long symptomId) {
        this.id = id;
        this.renew = renew;
        this.status = status;
        this.typeId = typeId;
        this.symptomId = symptomId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTypeSymptomDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getRenew() {
        return renew;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setRenew(String renew) {
        this.renew = renew;
    }

    public boolean getStatus() {
        return status;
    }

    public void setStatus(boolean status) {
        this.status = status;
    }

    public long getTypeId() {
        return typeId;
    }

    public void setTypeId(long typeId) {
        this.typeId = typeId;
    }

    public long getSymptomId() {
        return symptomId;
    }

    public void setSymptomId(long symptomId) {
        this.symptomId = symptomId;
    }

    /** To-one relationship, resolved on first access. */
    public Type getType() {
        long __key = this.typeId;
        if (type__resolvedKey == null || !type__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TypeDao targetDao = daoSession.getTypeDao();
            Type typeNew = targetDao.load(__key);
            synchronized (this) {
                type = typeNew;
            	type__resolvedKey = __key;
            }
        }
        return type;
    }

    public void setType(Type type) {
        if (type == null) {
            throw new DaoException("To-one property 'typeId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.type = type;
            typeId = type.getId();
            type__resolvedKey = typeId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Symptom getSymptom() {
        long __key = this.symptomId;
        if (symptom__resolvedKey == null || !symptom__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SymptomDao targetDao = daoSession.getSymptomDao();
            Symptom symptomNew = targetDao.load(__key);
            synchronized (this) {
                symptom = symptomNew;
            	symptom__resolvedKey = __key;
            }
        }
        return symptom;
    }

    public void setSymptom(Symptom symptom) {
        if (symptom == null) {
            throw new DaoException("To-one property 'symptomId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.symptom = symptom;
            symptomId = symptom.getId();
            symptom__resolvedKey = symptomId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
