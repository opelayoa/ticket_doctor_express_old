package com.tiendas3b.ticketdoctor.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.tiendas3b.ticketdoctor.db.dao.ImpCause;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IMP_CAUSE".
*/
public class ImpCauseDao extends AbstractDao<ImpCause, Long> {

    public static final String TABLENAME = "IMP_CAUSE";

    /**
     * Properties of entity ImpCause.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Description = new Property(1, String.class, "description", false, "DESCRIPTION");
        public final static Property GeneralDescription = new Property(2, String.class, "generalDescription", false, "GENERAL_DESCRIPTION");
        public final static Property ImpSolution = new Property(3, String.class, "impSolution", false, "IMP_SOLUTION");
        public final static Property Code = new Property(4, String.class, "code", false, "CODE");
        public final static Property Status = new Property(5, short.class, "status", false, "STATUS");
    };


    public ImpCauseDao(DaoConfig config) {
        super(config);
    }
    
    public ImpCauseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IMP_CAUSE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DESCRIPTION\" TEXT NOT NULL ," + // 1: description
                "\"GENERAL_DESCRIPTION\" TEXT NOT NULL ," + // 2: generalDescription
                "\"IMP_SOLUTION\" TEXT NOT NULL ," + // 3: impSolution
                "\"CODE\" TEXT," + // 4: code
                "\"STATUS\" INTEGER NOT NULL );"); // 5: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IMP_CAUSE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ImpCause entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getDescription());
        stmt.bindString(3, entity.getGeneralDescription());
        stmt.bindString(4, entity.getImpSolution());
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(5, code);
        }
        stmt.bindLong(6, entity.getStatus());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ImpCause readEntity(Cursor cursor, int offset) {
        ImpCause entity = new ImpCause( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // description
            cursor.getString(offset + 2), // generalDescription
            cursor.getString(offset + 3), // impSolution
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // code
            cursor.getShort(offset + 5) // status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ImpCause entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDescription(cursor.getString(offset + 1));
        entity.setGeneralDescription(cursor.getString(offset + 2));
        entity.setImpSolution(cursor.getString(offset + 3));
        entity.setCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStatus(cursor.getShort(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ImpCause entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ImpCause entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
