package com.tiendas3b.ticketdoctor.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.tiendas3b.ticketdoctor.db.dao.Provider;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PROVIDER".
*/
public class ProviderDao extends AbstractDao<Provider, Long> {

    public static final String TABLENAME = "PROVIDER";

    /**
     * Properties of entity Provider.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BusinessName = new Property(1, String.class, "businessName", false, "BUSINESS_NAME");
        public final static Property Description = new Property(2, String.class, "description", false, "DESCRIPTION");
        public final static Property Rfc = new Property(3, boolean.class, "rfc", false, "RFC");
        public final static Property Street = new Property(4, String.class, "street", false, "STREET");
        public final static Property Number = new Property(5, String.class, "number", false, "NUMBER");
        public final static Property Neighborhood = new Property(6, String.class, "neighborhood", false, "NEIGHBORHOOD");
        public final static Property Township = new Property(7, String.class, "township", false, "TOWNSHIP");
        public final static Property City = new Property(8, boolean.class, "city", false, "CITY");
        public final static Property PostalCode = new Property(9, String.class, "postalCode", false, "POSTAL_CODE");
        public final static Property Phone1 = new Property(10, String.class, "phone1", false, "PHONE1");
        public final static Property Extension1 = new Property(11, String.class, "extension1", false, "EXTENSION1");
        public final static Property Phone2 = new Property(12, String.class, "phone2", false, "PHONE2");
        public final static Property Extension2 = new Property(13, String.class, "extension2", false, "EXTENSION2");
        public final static Property Cont1 = new Property(14, Boolean.class, "cont1", false, "CONT1");
        public final static Property PhoneCont1 = new Property(15, Boolean.class, "phoneCont1", false, "PHONE_CONT1");
        public final static Property EmailCont1 = new Property(16, String.class, "emailCont1", false, "EMAIL_CONT1");
        public final static Property Cont2 = new Property(17, String.class, "cont2", false, "CONT2");
        public final static Property PhoneCont2 = new Property(18, String.class, "phoneCont2", false, "PHONE_CONT2");
        public final static Property EmailCont2 = new Property(19, String.class, "emailCont2", false, "EMAIL_CONT2");
        public final static Property Account = new Property(20, boolean.class, "account", false, "ACCOUNT");
        public final static Property DeliveryDays = new Property(21, String.class, "deliveryDays", false, "DELIVERY_DAYS");
        public final static Property PayDays = new Property(22, String.class, "payDays", false, "PAY_DAYS");
        public final static Property Status = new Property(23, String.class, "status", false, "STATUS");
        public final static Property Key = new Property(24, String.class, "key", false, "KEY");
    };


    public ProviderDao(DaoConfig config) {
        super(config);
    }
    
    public ProviderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PROVIDER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BUSINESS_NAME\" TEXT NOT NULL ," + // 1: businessName
                "\"DESCRIPTION\" TEXT," + // 2: description
                "\"RFC\" INTEGER NOT NULL ," + // 3: rfc
                "\"STREET\" TEXT," + // 4: street
                "\"NUMBER\" TEXT," + // 5: number
                "\"NEIGHBORHOOD\" TEXT," + // 6: neighborhood
                "\"TOWNSHIP\" TEXT," + // 7: township
                "\"CITY\" INTEGER NOT NULL ," + // 8: city
                "\"POSTAL_CODE\" TEXT," + // 9: postalCode
                "\"PHONE1\" TEXT," + // 10: phone1
                "\"EXTENSION1\" TEXT," + // 11: extension1
                "\"PHONE2\" TEXT," + // 12: phone2
                "\"EXTENSION2\" TEXT," + // 13: extension2
                "\"CONT1\" INTEGER," + // 14: cont1
                "\"PHONE_CONT1\" INTEGER," + // 15: phoneCont1
                "\"EMAIL_CONT1\" TEXT," + // 16: emailCont1
                "\"CONT2\" TEXT," + // 17: cont2
                "\"PHONE_CONT2\" TEXT," + // 18: phoneCont2
                "\"EMAIL_CONT2\" TEXT," + // 19: emailCont2
                "\"ACCOUNT\" INTEGER NOT NULL ," + // 20: account
                "\"DELIVERY_DAYS\" TEXT," + // 21: deliveryDays
                "\"PAY_DAYS\" TEXT," + // 22: payDays
                "\"STATUS\" TEXT," + // 23: status
                "\"KEY\" TEXT);"); // 24: key
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PROVIDER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Provider entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getBusinessName());
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
        stmt.bindLong(4, entity.getRfc() ? 1L: 0L);
 
        String street = entity.getStreet();
        if (street != null) {
            stmt.bindString(5, street);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(6, number);
        }
 
        String neighborhood = entity.getNeighborhood();
        if (neighborhood != null) {
            stmt.bindString(7, neighborhood);
        }
 
        String township = entity.getTownship();
        if (township != null) {
            stmt.bindString(8, township);
        }
        stmt.bindLong(9, entity.getCity() ? 1L: 0L);
 
        String postalCode = entity.getPostalCode();
        if (postalCode != null) {
            stmt.bindString(10, postalCode);
        }
 
        String phone1 = entity.getPhone1();
        if (phone1 != null) {
            stmt.bindString(11, phone1);
        }
 
        String extension1 = entity.getExtension1();
        if (extension1 != null) {
            stmt.bindString(12, extension1);
        }
 
        String phone2 = entity.getPhone2();
        if (phone2 != null) {
            stmt.bindString(13, phone2);
        }
 
        String extension2 = entity.getExtension2();
        if (extension2 != null) {
            stmt.bindString(14, extension2);
        }
 
        Boolean cont1 = entity.getCont1();
        if (cont1 != null) {
            stmt.bindLong(15, cont1 ? 1L: 0L);
        }
 
        Boolean phoneCont1 = entity.getPhoneCont1();
        if (phoneCont1 != null) {
            stmt.bindLong(16, phoneCont1 ? 1L: 0L);
        }
 
        String emailCont1 = entity.getEmailCont1();
        if (emailCont1 != null) {
            stmt.bindString(17, emailCont1);
        }
 
        String cont2 = entity.getCont2();
        if (cont2 != null) {
            stmt.bindString(18, cont2);
        }
 
        String phoneCont2 = entity.getPhoneCont2();
        if (phoneCont2 != null) {
            stmt.bindString(19, phoneCont2);
        }
 
        String emailCont2 = entity.getEmailCont2();
        if (emailCont2 != null) {
            stmt.bindString(20, emailCont2);
        }
        stmt.bindLong(21, entity.getAccount() ? 1L: 0L);
 
        String deliveryDays = entity.getDeliveryDays();
        if (deliveryDays != null) {
            stmt.bindString(22, deliveryDays);
        }
 
        String payDays = entity.getPayDays();
        if (payDays != null) {
            stmt.bindString(23, payDays);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(24, status);
        }
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(25, key);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Provider readEntity(Cursor cursor, int offset) {
        Provider entity = new Provider( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // businessName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // description
            cursor.getShort(offset + 3) != 0, // rfc
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // street
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // number
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // neighborhood
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // township
            cursor.getShort(offset + 8) != 0, // city
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // postalCode
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // phone1
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // extension1
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // phone2
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // extension2
            cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0, // cont1
            cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0, // phoneCont1
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // emailCont1
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // cont2
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // phoneCont2
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // emailCont2
            cursor.getShort(offset + 20) != 0, // account
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // deliveryDays
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // payDays
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // status
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24) // key
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Provider entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBusinessName(cursor.getString(offset + 1));
        entity.setDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRfc(cursor.getShort(offset + 3) != 0);
        entity.setStreet(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNumber(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNeighborhood(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTownship(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCity(cursor.getShort(offset + 8) != 0);
        entity.setPostalCode(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPhone1(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setExtension1(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPhone2(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setExtension2(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCont1(cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0);
        entity.setPhoneCont1(cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0);
        entity.setEmailCont1(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setCont2(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setPhoneCont2(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setEmailCont2(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setAccount(cursor.getShort(offset + 20) != 0);
        entity.setDeliveryDays(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setPayDays(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setStatus(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setKey(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Provider entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Provider entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
