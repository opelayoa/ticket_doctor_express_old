package com.tiendas3b.ticketdoctor.db.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.tiendas3b.ticketdoctor.db.dao.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property LastName = new Property(2, String.class, "lastName", false, "LAST_NAME");
        public final static Property Login = new Property(3, String.class, "login", false, "LOGIN");
        public final static Property Password = new Property(4, String.class, "password", false, "PASSWORD");
        public final static Property Email = new Property(5, String.class, "email", false, "EMAIL");
        public final static Property Phone = new Property(6, String.class, "phone", false, "PHONE");
        public final static Property Alias = new Property(7, String.class, "alias", false, "ALIAS");
        public final static Property DepartmentId = new Property(8, Integer.class, "departmentId", false, "DEPARTMENT_ID");
        public final static Property BranchId = new Property(9, Integer.class, "branchId", false, "BRANCH_ID");
        public final static Property MailSend = new Property(10, Boolean.class, "mailSend", false, "MAIL_SEND");
        public final static Property Spending = new Property(11, Integer.class, "spending", false, "SPENDING");
        public final static Property UserCreate = new Property(12, Integer.class, "userCreate", false, "USER_CREATE");
        public final static Property DateCreate = new Property(13, java.util.Date.class, "dateCreate", false, "DATE_CREATE");
        public final static Property UserModify = new Property(14, Integer.class, "userModify", false, "USER_MODIFY");
        public final static Property DateModify = new Property(15, java.util.Date.class, "dateModify", false, "DATE_MODIFY");
        public final static Property UserId = new Property(16, Integer.class, "userId", false, "USER_ID");
        public final static Property Status = new Property(17, Boolean.class, "status", false, "STATUS");
        public final static Property MailEvent = new Property(18, Boolean.class, "mailEvent", false, "MAIL_EVENT");
        public final static Property ProfileId = new Property(19, Long.class, "profileId", false, "PROFILE_ID");
    };

    private DaoSession daoSession;


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"LAST_NAME\" TEXT," + // 2: lastName
                "\"LOGIN\" TEXT," + // 3: login
                "\"PASSWORD\" TEXT," + // 4: password
                "\"EMAIL\" TEXT," + // 5: email
                "\"PHONE\" TEXT," + // 6: phone
                "\"ALIAS\" TEXT," + // 7: alias
                "\"DEPARTMENT_ID\" INTEGER," + // 8: departmentId
                "\"BRANCH_ID\" INTEGER," + // 9: branchId
                "\"MAIL_SEND\" INTEGER," + // 10: mailSend
                "\"SPENDING\" INTEGER," + // 11: spending
                "\"USER_CREATE\" INTEGER," + // 12: userCreate
                "\"DATE_CREATE\" INTEGER," + // 13: dateCreate
                "\"USER_MODIFY\" INTEGER," + // 14: userModify
                "\"DATE_MODIFY\" INTEGER," + // 15: dateModify
                "\"USER_ID\" INTEGER," + // 16: userId
                "\"STATUS\" INTEGER," + // 17: status
                "\"MAIL_EVENT\" INTEGER," + // 18: mailEvent
                "\"PROFILE_ID\" INTEGER);"); // 19: profileId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String lastName = entity.getLastName();
        if (lastName != null) {
            stmt.bindString(3, lastName);
        }
 
        String login = entity.getLogin();
        if (login != null) {
            stmt.bindString(4, login);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(5, password);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(6, email);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(7, phone);
        }
 
        String alias = entity.getAlias();
        if (alias != null) {
            stmt.bindString(8, alias);
        }
 
        Integer departmentId = entity.getDepartmentId();
        if (departmentId != null) {
            stmt.bindLong(9, departmentId);
        }
 
        Integer branchId = entity.getBranchId();
        if (branchId != null) {
            stmt.bindLong(10, branchId);
        }
 
        Boolean mailSend = entity.getMailSend();
        if (mailSend != null) {
            stmt.bindLong(11, mailSend ? 1L: 0L);
        }
 
        Integer spending = entity.getSpending();
        if (spending != null) {
            stmt.bindLong(12, spending);
        }
 
        Integer userCreate = entity.getUserCreate();
        if (userCreate != null) {
            stmt.bindLong(13, userCreate);
        }
 
        java.util.Date dateCreate = entity.getDateCreate();
        if (dateCreate != null) {
            stmt.bindLong(14, dateCreate.getTime());
        }
 
        Integer userModify = entity.getUserModify();
        if (userModify != null) {
            stmt.bindLong(15, userModify);
        }
 
        java.util.Date dateModify = entity.getDateModify();
        if (dateModify != null) {
            stmt.bindLong(16, dateModify.getTime());
        }
 
        Integer userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(17, userId);
        }
 
        Boolean status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(18, status ? 1L: 0L);
        }
 
        Boolean mailEvent = entity.getMailEvent();
        if (mailEvent != null) {
            stmt.bindLong(19, mailEvent ? 1L: 0L);
        }
 
        Long profileId = entity.getProfileId();
        if (profileId != null) {
            stmt.bindLong(20, profileId);
        }
    }

    @Override
    protected void attachEntity(User entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // lastName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // login
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // password
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // email
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // phone
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // alias
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // departmentId
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // branchId
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // mailSend
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // spending
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // userCreate
            cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)), // dateCreate
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // userModify
            cursor.isNull(offset + 15) ? null : new java.util.Date(cursor.getLong(offset + 15)), // dateModify
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // userId
            cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0, // status
            cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0, // mailEvent
            cursor.isNull(offset + 19) ? null : cursor.getLong(offset + 19) // profileId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLastName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLogin(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPassword(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEmail(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPhone(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAlias(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDepartmentId(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setBranchId(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setMailSend(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setSpending(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setUserCreate(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setDateCreate(cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)));
        entity.setUserModify(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setDateModify(cursor.isNull(offset + 15) ? null : new java.util.Date(cursor.getLong(offset + 15)));
        entity.setUserId(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setStatus(cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0);
        entity.setMailEvent(cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0);
        entity.setProfileId(cursor.isNull(offset + 19) ? null : cursor.getLong(offset + 19));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getProfileDao().getAllColumns());
            builder.append(" FROM USER T");
            builder.append(" LEFT JOIN PROFILE T0 ON T.\"PROFILE_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected User loadCurrentDeep(Cursor cursor, boolean lock) {
        User entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Profile profile = loadCurrentOther(daoSession.getProfileDao(), cursor, offset);
        entity.setProfile(profile);

        return entity;    
    }

    public User loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<User> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<User> list = new ArrayList<User>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<User> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<User> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
